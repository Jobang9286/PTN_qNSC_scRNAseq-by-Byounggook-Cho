################################## Figure 1a and b ################################## 

sort_neurogensis_ss <- subset(sort_neurogensis_s, idents = c("10", "9"), invert =T)

sort_neurogensis_ss <- ScaleData(sort_neurogensis_ss, verbose = FALSE)
sort_neurogensis_ss <- RunPCA(sort_neurogensis_ss, npcs = 30, verbose = FALSE)
sort_neurogensis_ss <- RunUMAP(sort_neurogensis_ss, reduction = "pca", dims = 1:10)
sort_neurogensis_ss <- FindNeighbors(sort_neurogensis_ss, reduction = "pca", dims = 1:10)
sort_neurogensis_ss <- FindClusters(sort_neurogensis_ss, resolution = 0.6)

DimPlot(sort_neurogensis_ss, reduction = "umap",label = T, label.size = 10)

FeaturePlot(sort_neurogensis_ss, features = c("Mki67"), cols = c("yellow", "red"), max.cutoff = 2, ncol = 3)

sort_neurogensis_ss <- RenameIdents(sort_neurogensis_ss,'0' = "Neuroblasts",'1' = "Neuroblasts",'2' = "Neuroblasts",'3' = "qNSCs",'4' = "aNSCs",'5' = "TAPs",'6' = "qNSCs",'7' = "TAPs",'8' = "TAPs",'9' = "aNSCs")

levels(sort_neurogensis_ss) <- c("qNSCs", "aNSCs", "TAPs", "Neuroblasts")

DimPlot(sort_neurogensis_ss, reduction = "umap", pt.size = 0.7, label = F, label.size = 7, cols = c("#3D4C8A", "#087999", "#73D477", "#D7E219"))

VlnPlot(sort_neurogensis_ss, features = c("Alk"), 
        pt.size = 0, cols = c("#3D4C8A", "#087999", "#73D477", "#D7E219"))

VlnPlot(sort_neurogensis_ss, features = c("Ptn"), 
        pt.size = 0, cols = c("lightgray", "#F08C8D"), split.by = "sample", idents = c("qNSCs", "aNSCs")) + geom_boxplot()

features <- c("Gja1", 'Bcan', "Fgfr3" ,"Apoe", "Thbs4", "Clu", "Ascl1", "Fabp7", "Egfr", "Top2a", "Mki67", "Dlx2", "Dcx", "Gad2", "Sox11","Gad1", "Sox4", "Tubb3")

DotPlot(sort_neurogensis_ss, features = features, cols = c("yellow", "red")) + RotatedAxis()

################################## Figure 1c ################################## 
############################## GO Terms dot plot ##############################

organism = "org.Mm.eg.db"

library(organism, character.only = TRUE)

pbmc.markers <- FindAllMarkers(sort_neurogensis_ss, only.pos = TRUE, min.pct = 0.1, logfc.threshold = 0.25)

pbmc.markers


pbmc.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_log2FC)
top100 <- pbmc.markers %>% group_by(cluster) %>% top_n(n = 200, wt = avg_log2FC)
top100pval <- subset(top100, rowSums(top100[5] < 0.05) > 0)

top100pval


write.csv(pbmc.markers, "/home/student/23_LRRK2/all_deg.csv")

library("clusterProfiler")
library("org.Mm.eg.db")
library("AnnotationHub")
library(ggplot2)

df <- top100pval[,7:6]
df
dfsample <- split(df$gene,df$cluster)
length(dfsample)

dfsample

dfsample$`qNSCs` = bitr(dfsample$`qNSCs`, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Mm.eg.db")
dfsample$`aNSCs` = bitr(dfsample$`aNSCs`, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Mm.eg.db")
dfsample$`TAPs` = bitr(dfsample$`TAPs`, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Mm.eg.db")
dfsample$`Neuroblasts` = bitr(dfsample$`Neuroblasts`, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Mm.eg.db")

genelist <- list("qNSCs" = dfsample$`qNSCs`$ENTREZID,
                 "aNSCs" = dfsample$`aNSCs`$ENTREZID, 
                 "TAPs" = dfsample$`TAPs`$ENTREZID, 
                 "Neuroblasts" = dfsample$`Neuroblasts`$ENTREZID)

genelist

GOclusterplot <- compareCluster(geneCluster = genelist, fun = "enrichGO", OrgDb = "org.Mm.eg.db", ont = "BP")

clusterProfiler::dotplot(GOclusterplot, showCategory=5)

###################################### figure 1d #############################################
###################################### cell cycle #############################################

library(gprofiler2)
mmus_s = gorth(cc.genes.updated.2019$s.genes, source_organism = "hsapiens", target_organism = "mmusculus")$ortholog_name
mmus_g2m = gorth(cc.genes.updated.2019$g2m.genes, source_organism = "hsapiens", target_organism = "mmusculus")$ortholog_name

sort_neurogensis_cc <- CellCycleScoring(sort_neurogensis_ss, s.features = mmus_s, g2m.features = mmus_g2m, set.ident = TRUE)

sort_neurogensis_cc <- RunPCA(sort_neurogensis_cc, features = c(mmus_s, mmus_g2m))

DimPlot(sort_neurogensis_cc, reduction = "umap", label = F, label.size = 7, pt.size = 1.1, group.by = "Phase")


###################################### figure 1e-f #####################################################
###################################### pseudotime analysis #############################################

sort_NSC_1 <- sort_neurogensis_ss

sce_1 <- as.SingleCellExperiment(sort_NSC_1, assay = "RNA")

shuffle <- sample(ncol(sce_1))

sce_1 <- slingshot(sce_1, reducedDim = 'UMAP', clusterLabels = sce_1$ident, start.clus = 'qNSCs', approx_points = 200)
layout(matrix(c(1, 1, 2, 3), 2))
par(mar = c(4.5, 4, 1, 1))

plot(reducedDims(sce_1)$UMAP, col = cell_colors, pch=16, asp = 1)
lines(SlingshotDataSet(sce_1), lwd=2, col='black')

cell_pal <- function(cell_vars, pal_fun,...) {
  if (is.numeric(cell_vars)) {
    pal <- pal_fun(100, ...)
    return(pal[cut(cell_vars, breaks = 100)])
  } else {
    categories <- sort(unique(cell_vars))
    pal <- setNames(pal_fun(length(categories), ...), categories)
    return(pal[cell_vars])
  }
}

cell_colors <- cell_pal(sce_1$condition, brewer_pal("qual", "Set2"))
cell_colors_clust <- cell_pal(sce_1$seurat_clusters, hue_pal())

plot(reducedDims(sce_1)$UMAP[shuffle, ], asp = 1, pch = 16, xlab = "UMAP_1", ylab = "UMAP_2",
     col = hcl.colors(100, alpha = .5)[cut(sce_1$slingPseudotime_1, breaks = 100)][shuffle])

plot(reducedDims(sce_1)$UMAP[shuffle, ], asp = 1, pch = 16, xlab = "UMAP_1", ylab = "UMAP_2",
     col = hcl.colors(100, alpha = .5)[cut(sce_1$slingPseudotime_2, breaks = 100)][shuffle])


sce_1$slingPseudotime_2

lines(SlingshotDataSet(sce_1))

ds <- list(a_1 = density(slingPseudotime(sce_1)[colData(sce_1)$condition == "control", 1], na.rm = T),
           a_2 = density(slingPseudotime(sce_1)[colData(sce_1)$condition == "shank3_OE", 1], na.rm = T))

xlim <- range(c(ds$a_1$x, ds$a_2$x))
ylim <- range(c(ds$a_1$y, ds$a_2$y))

plot(xlim, ylim, col = "white", xlab = "Pseudotime", ylab = "")

polygon(c(min(ds$a_1$x), ds$a_1$x, max(ds$a_1$x)), c(0, ds$a_1$y, 0),
        col = alpha(brewer.pal(10, "Set3")[9], alpha = .5))
polygon(c(min(ds$a_2$x), ds$a_2$x, max(ds$a_2$x)), c(0, ds$a_2$y, 0),
        col = alpha(brewer.pal(10, "Reds")[8], alpha = .5))

ds <- list(a_1 = density(slingPseudotime(sce_1)[colData(sce_1)$sample == "control_rep1", 1], na.rm = T),
           a_2 = density(slingPseudotime(sce_1)[colData(sce_1)$sample == "control_rep2", 1], na.rm = T),
           a_3 = density(slingPseudotime(sce_1)[colData(sce_1)$condition == "shank3_OE", 1], na.rm = T))


xlim <- range(c(ds$a_1$x, ds$a_2$x, ds$a_3$x))
ylim <- range(c(ds$a_1$y, ds$a_2$y, ds$a_3$y))

plot(xlim, ylim, col = "white", xlab = "Pseudotime", ylab = "")

polygon(c(min(ds$a_1$x), ds$a_1$x, max(ds$a_1$x)), c(0, ds$a_1$y, 0),
        col = alpha(brewer.pal(10, "Set3")[9], alpha = .5))
polygon(c(min(ds$a_2$x), ds$a_2$x, max(ds$a_2$x)), c(0, ds$a_2$y, 0),
        col = alpha(brewer.pal(10, "Set3")[1], alpha = .5))
polygon(c(min(ds$a_3$x), ds$a_3$x, max(ds$a_3$x)), c(0, ds$a_3$y, 0),
        col = alpha(brewer.pal(10, "Reds")[8], alpha = .5))


###################################### figure 1g-i #####################################################
###################################### GSEA analysis ###################################################
#####################(Harris et al., 2021 deep qNSCs signature module analysis #########################

RG.cells <- subset(sort_neurogensis_ss, idents = c("qNSCs", "aNSCs"))
RG.cells <- ScaleData(RG.cells, verbose = FALSE)
RG.cells<-NormalizeData(RG.cells, assay = "RNA")
Idents(RG.cells) <- "condition"
avg.RG.cells <- as.data.frame(log1p(AverageExpression(RG.cells, verbose = FALSE)$RNA))

write.csv(avg.RG.cells, "./avg.qnsc_gsea.csv")

deep.genes <- as.matrix(read.csv("/home/student/Arid1b_mouse/cell_stem_cell_qRG_2021/dNSC_csc2.csv"))

deep.genes <- as.character(deep.genes)

deep_neurogensis = AddModuleScore(
  object = sort_neurogensis_ss,
  features = list(deep.genes),
  name = 'deep.genes', assay = "RNA")

VlnPlot(deep_neurogensis, features = c("deep.genes1"), 
        pt.size = 0, cols = c("#3D4C8A", "#087999", "#73D477", "#D7E219"))

VlnPlot(deep_neurogensis, features = c("deep.genes1"), 
        pt.size = 0, cols = c("lightgray", "#A00000"), split.by = "condition")

VlnPlot(deep_neurogensis_bar, features = "deep.genes1", pt.size = 0) +
  NoLegend() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  stat_compare_means()

deep_neurogensis_bar <- deep_neurogensis
deep_neurogensis_bar$condition <- factor(x = deep_neurogensis_bar$condition, levels = c('control', 'OE_shank3'))


deep_neurogensis_bar$celltype.stim <- paste(Idents(deep_neurogensis_bar), deep_neurogensis_bar$condition, sep = "_")
deep_neurogensis_bar$celltype <- Idents(deep_neurogensis_bar)
Idents(deep_neurogensis_bar) <- "celltype.stim"
deep_neurogensis_bar$celltype.stim
levels(deep_neurogensis_bar) <- c("qNSCs_control","qNSCs_OE_shank3", "aNSCs_control","aNSCs_OE_shank3", "TAPs_control","TAPs_OE_shank3", "Neuroblasts_control","Neuroblasts_OE_shank3")
my_comparisons <- list(c("qNSCs_control","qNSCs_OE_shank3"), c("aNSCs_control","aNSCs_OE_shank3", c("TAPs_control","TAPs_OE_shank3"), c("Neuroblasts_control","Neuroblasts_OE_shank3")))

library(ggpubr)

VlnPlot(deep_neurogensis_bar, features = "deep.genes1", pt.size = 0) +
  NoLegend() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  stat_compare_means()

VlnPlot(deep_neurogensis_bar, features = "deep.genes1", pt.size = 0) +
  NoLegend() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  stat_compare_means(comparisons = my_comparisons) +
  ylim(0, 8)
